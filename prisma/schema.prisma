// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  firstName    String
  lastName     String?
  userName     String?
  languageCode String?
  telegramId   BigInt   @unique
  // telegramId   String   @unique
  isBot        Boolean  @default(false)
  isPremium    Boolean? @default(false)

  Message Message[]

  collections UserCollection[]
  // UserSettings UserSettings?

  @@index([telegramId, createdAt])
}

enum DataCollection {
  GOODREADS
  YOUTUBE
  PODCHASER
  MEETUP
}

model UserCollection {
  id         String         @id @default(uuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  // collection     Collection         @enum(name: "DataCollection")
  collection DataCollection @unique
  databaseId String?        @unique
  // userSettings   UserSettings   @relation(fields: [userSettingsId], references: [id])
  // userSettingsId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  // UserSettings   UserSettings? @relation(fields: [userSettingsId], references: [id])
  // userSettingsId String?

  // @@unique([collection, databaseId])
}

// save user settings, like database in use, how to reply to msgs, etc
// model UserSettings {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   // databaseId String?
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String   @unique

//   collections UserCollection[]
// }

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Author {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  url       String
  isbn      String?
  published DateTime?
  Book      Book[]
}

model Book {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    Author   @relation(fields: [authorId], references: [id])
  authorId  String
}
